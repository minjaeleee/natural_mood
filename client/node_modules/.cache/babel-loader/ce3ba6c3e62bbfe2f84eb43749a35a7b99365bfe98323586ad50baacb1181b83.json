{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRouter } from \"./useRouter\";\nexport const useFilterType = _ref => {\n  _s();\n  let {\n    pathname,\n    search\n  } = _ref;\n  const getQueryString = new URLSearchParams(decodeURIComponent(search).replace(/,/g, '+'));\n  const getTypeValue = getQueryString.get('type');\n  const {\n    routeTo\n  } = useRouter();\n\n  // fn2 라우팅 기능, searchparams는 return을 최종 string 형태로 하게됨.\n  const handleTypeQueryString = type => {\n    if (getTypeValue) {\n      // 배열화\n      const queryStringArr = getTypeValue.split(\" \");\n      if (queryStringArr.includes(type)) {\n        queryStringArr.filter(value => value !== type);\n        getQueryString.set('type', queryStringArr.join(','));\n      }\n      queryStringArr.push(type);\n      getQueryString.set('type', queryStringArr.join(','));\n    } else {\n      getQueryString.set('type', type);\n    }\n    return routeTo(`?${getQueryString.toString()}`);\n  };\n  // fn2 함수를 호출할때 routerTo(fn2(key 등 인자 값))\n\n  return {\n    getQueryStringValue: getTypeValue === null || getTypeValue === void 0 ? void 0 : getTypeValue.split(\" \"),\n    handleTypeQueryString\n  };\n};\n_s(useFilterType, \"XrM+0LK3Xgy5UaPn0ZI8m5bR6aQ=\", false, function () {\n  return [useRouter];\n});","map":{"version":3,"names":["useRouter","useFilterType","_ref","_s","pathname","search","getQueryString","URLSearchParams","decodeURIComponent","replace","getTypeValue","get","routeTo","handleTypeQueryString","type","queryStringArr","split","includes","filter","value","set","join","push","toString","getQueryStringValue"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/useHook/useFilterType.tsx"],"sourcesContent":["import { useRouter } from \"./useRouter\";\n\nexport const useFilterType = ({pathname, search}) => {\n  const getQueryString = new URLSearchParams(decodeURIComponent(search).replace(/,/g, '+'));\n  const getTypeValue = getQueryString.get('type')\n  const {routeTo} = useRouter()\n\n  // fn2 라우팅 기능, searchparams는 return을 최종 string 형태로 하게됨.\n  const handleTypeQueryString = (type:string) => {\n    if(getTypeValue) {\n      // 배열화\n      const queryStringArr = getTypeValue.split(\" \")\n      if(queryStringArr.includes(type)) {\n        queryStringArr.filter(value => value !== type)\n        getQueryString.set('type', queryStringArr.join(','))\n      }\n      queryStringArr.push(type)\n      getQueryString.set('type', queryStringArr.join(','))\n    } else {\n      getQueryString.set('type', type)\n    }\n\n\n    return routeTo(`?${getQueryString.toString()}`)\n  }\n  // fn2 함수를 호출할때 routerTo(fn2(key 등 인자 값))\n\n  return {\n    getQueryStringValue: getTypeValue?.split(\" \"),\n    handleTypeQueryString\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,OAAO,MAAMC,aAAa,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAACC,QAAQ;IAAEC;EAAM,CAAC,GAAAH,IAAA;EAC9C,MAAMI,cAAc,GAAG,IAAIC,eAAe,CAACC,kBAAkB,CAACH,MAAM,CAAC,CAACI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;EACzF,MAAMC,YAAY,GAAGJ,cAAc,CAACK,GAAG,CAAC,MAAM,CAAC;EAC/C,MAAM;IAACC;EAAO,CAAC,GAAGZ,SAAS,EAAE;;EAE7B;EACA,MAAMa,qBAAqB,GAAIC,IAAW,IAAK;IAC7C,IAAGJ,YAAY,EAAE;MACf;MACA,MAAMK,cAAc,GAAGL,YAAY,CAACM,KAAK,CAAC,GAAG,CAAC;MAC9C,IAAGD,cAAc,CAACE,QAAQ,CAACH,IAAI,CAAC,EAAE;QAChCC,cAAc,CAACG,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAKL,IAAI,CAAC;QAC9CR,cAAc,CAACc,GAAG,CAAC,MAAM,EAAEL,cAAc,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC;MACtD;MACAN,cAAc,CAACO,IAAI,CAACR,IAAI,CAAC;MACzBR,cAAc,CAACc,GAAG,CAAC,MAAM,EAAEL,cAAc,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC,MAAM;MACLf,cAAc,CAACc,GAAG,CAAC,MAAM,EAAEN,IAAI,CAAC;IAClC;IAGA,OAAOF,OAAO,CAAE,IAAGN,cAAc,CAACiB,QAAQ,EAAG,EAAC,CAAC;EACjD,CAAC;EACD;;EAEA,OAAO;IACLC,mBAAmB,EAAEd,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEM,KAAK,CAAC,GAAG,CAAC;IAC7CH;EACF,CAAC;AACH,CAAC;AAAAV,EAAA,CA7BYF,aAAa;EAAA,QAGND,SAAS;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}