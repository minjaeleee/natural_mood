{"ast":null,"code":"import { BASE_URL } from \"./const\";\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\nexport const getBeer = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`);\n  return response.ok ? await response.json() : null;\n};\nexport const getWine = async values => {\n  // if(values?.length < 2) {\n  // 단일 선택 및 기본 값\n  const res = await fetch(`${BASE_URL}/wines/${values[0] || 'reds'}`);\n  console.log(\"1\");\n  if (!res.ok) return;\n  console.log(\"2\");\n  const resJson = await res.json();\n  console.log(\"3\");\n  const result = resJson.slice(0, 20);\n  console.log(\"4\");\n  return result;\n  // } else {\n  //   // 중복 선택\n  //   const list = []\n  //   for(const value of values) {\n  //     const res = await fetch(`${BASE_URL}/wines/${value}`)\n  //     if(!res.ok) return list;\n  //     const resJson = await res.json()\n  //     list.push(...resJson)\n  //   }\n  //   shuffle(list)\n  //   const result = list.slice(0,20)\n  //   return result\n  // }\n};\n\nexport const getCoffee = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`);\n  return response.ok ? await response.json() : null;\n};","map":{"version":3,"names":["BASE_URL","shuffle","array","sort","Math","random","getBeer","types","response","fetch","ok","json","getWine","values","res","console","log","resJson","result","slice","getCoffee"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/api/beverage.ts"],"sourcesContent":["import { IBeer, ICoffee, IWine } from \"../types/beverage\"\nimport { BASE_URL } from \"./const\"\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nexport const getBeer = async (types: string | null): Promise<IBeer[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`)\n  return response.ok ? await response.json() : null\n}\n\nexport const getWine = async (values: string[] | []): Promise<IWine[]> => {\n  // if(values?.length < 2) {\n    // 단일 선택 및 기본 값\n    const res = await fetch(`${BASE_URL}/wines/${values[0] || 'reds'}`)\n    console.log(\"1\")\n    if(!res.ok) return;\n    console.log(\"2\")\n    const resJson = await res.json()\n    console.log(\"3\")\n    const result = resJson.slice(0,20)\n    console.log(\"4\")\n    return result\n  // } else {\n  //   // 중복 선택\n  //   const list = []\n  //   for(const value of values) {\n  //     const res = await fetch(`${BASE_URL}/wines/${value}`)\n  //     if(!res.ok) return list;\n  //     const resJson = await res.json()\n  //     list.push(...resJson)\n  //   }\n  //   shuffle(list)\n  //   const result = list.slice(0,20)\n  //   return result\n  // }\n}\nexport const getCoffee = async (types: string | null): Promise<ICoffee[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`)\n  return response.ok ? await response.json() : null\n}"],"mappings":"AACA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtBA,KAAK,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;AACvC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAOC,KAAoB,IAAuB;EACvE;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,QAAS,YAAW,CAAC;EACrD,OAAOQ,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAOC,MAAqB,IAAuB;EACxE;EACE;EACA,MAAMC,GAAG,GAAG,MAAML,KAAK,CAAE,GAAET,QAAS,UAASa,MAAM,CAAC,CAAC,CAAC,IAAI,MAAO,EAAC,CAAC;EACnEE,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,IAAG,CAACF,GAAG,CAACJ,EAAE,EAAE;EACZK,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,MAAMC,OAAO,GAAG,MAAMH,GAAG,CAACH,IAAI,EAAE;EAChCI,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,MAAME,MAAM,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC;EAClCJ,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,OAAOE,MAAM;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AACD,OAAO,MAAME,SAAS,GAAG,MAAOb,KAAoB,IAAyB;EAC3E;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,QAAS,cAAa,CAAC;EACvD,OAAOQ,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}