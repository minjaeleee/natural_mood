{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nconst useInfiniteScroll = targetEl => {\n  _s();\n  const observerRef = useRef(null);\n  const [intersecting, setIntersecting] = useState(false);\n  const getObserver = useCallback(() => {\n    // useCallback hook에서 값을 보장해주기 위해서 useRef 사용\n    if (!observerRef.current) {\n      observerRef.current = new IntersectionObserver(entries => {\n        setIntersecting(\n        // 없으면 intersecting false, 있으면 intersecting true\n        entries.some(entry => entry.isIntersecting));\n      });\n    }\n    return observerRef.current;\n  }, [observerRef]);\n  useEffect(() => {\n    if (targetEl.current) getObserver().observe(targetEl.current);\n    return () => {\n      getObserver().disconnect();\n    };\n  }, [getObserver, targetEl]);\n  return intersecting;\n};\n_s(useInfiniteScroll, \"wgJwkE67wQsXc1eiCmrL0CTwPqc=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useInfiniteScroll","targetEl","_s","observerRef","intersecting","setIntersecting","getObserver","current","IntersectionObserver","entries","some","entry","isIntersecting","observe","disconnect"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/client/src/useHook/useInfiniteScroll.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react'\n\nconst useInfiniteScroll = targetEl => {\n  const observerRef = useRef<IntersectionObserver>(null)\n  const [intersecting, setIntersecting] = useState<boolean>(false)\n\n  const getObserver = useCallback(() => {\n    // useCallback hook에서 값을 보장해주기 위해서 useRef 사용\n    if (!observerRef.current) {\n      observerRef.current = new IntersectionObserver(entries => {\n        setIntersecting(\n        // 없으면 intersecting false, 있으면 intersecting true\n        entries.some(entry => entry.isIntersecting)\n      )}\n    )}\n\n    return observerRef.current\n  }, [observerRef])\n\n  useEffect(() => {\n    if (targetEl.current) getObserver().observe(targetEl.current)\n    return () => {\n      getObserver().disconnect()\n    }\n  }, [getObserver, targetEl])\n\n  return intersecting\n}\n\nexport default useInfiniteScroll"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAEhE,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;EAAAC,EAAA;EACpC,MAAMC,WAAW,GAAGL,MAAM,CAAuB,IAAI,CAAC;EACtD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EAEhE,MAAMU,WAAW,GAAGP,WAAW,CAAC,MAAM;IACpC;IACA,IAAI,CAACI,WAAW,CAACI,OAAO,EAAE;MACxBJ,WAAW,CAACI,OAAO,GAAG,IAAIC,oBAAoB,CAACC,OAAO,IAAI;QACxDJ,eAAe;QACf;QACAI,OAAO,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,cAAc,CAAC,CAC5C;MAAA,CAAC,CACH;IAAA;IAED,OAAOT,WAAW,CAACI,OAAO;EAC5B,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjBN,SAAS,CAAC,MAAM;IACd,IAAII,QAAQ,CAACM,OAAO,EAAED,WAAW,EAAE,CAACO,OAAO,CAACZ,QAAQ,CAACM,OAAO,CAAC;IAC7D,OAAO,MAAM;MACXD,WAAW,EAAE,CAACQ,UAAU,EAAE;IAC5B,CAAC;EACH,CAAC,EAAE,CAACR,WAAW,EAAEL,QAAQ,CAAC,CAAC;EAE3B,OAAOG,YAAY;AACrB,CAAC;AAAAF,EAAA,CAzBKF,iBAAiB;AA2BvB,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}