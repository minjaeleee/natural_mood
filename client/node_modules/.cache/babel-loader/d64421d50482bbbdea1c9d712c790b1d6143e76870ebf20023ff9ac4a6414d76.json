{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nconst useInfiniteScroll = targetEl => {\n  _s();\n  const observerRef = useRef(null);\n  const [intersecting, setIntersecting] = useState(false);\n  const getObserver = useCallback(() => {\n    const what = new IntersectionObserver(entries => console.log(entries));\n    what.observe(observerRef.current);\n    if (!observerRef.current) {\n      observerRef.current = new IntersectionObserver(entries => setIntersecting(\n      // 없으면 intersecting false, 있으면 intersecting true\n      entries.some(entry => entry.isIntersecting)));\n    }\n    return observerRef.current;\n  }, [observerRef.current]);\n  useEffect(() => {\n    if (targetEl.current) getObserver().observe(targetEl.current);\n    return () => {\n      getObserver().disconnect();\n    };\n  }, [targetEl.current]);\n  return intersecting;\n};\n_s(useInfiniteScroll, \"wgJwkE67wQsXc1eiCmrL0CTwPqc=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useInfiniteScroll","targetEl","_s","observerRef","intersecting","setIntersecting","getObserver","what","IntersectionObserver","entries","console","log","observe","current","some","entry","isIntersecting","disconnect"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/useHook/useInfiniteScroll.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react'\n\nconst useInfiniteScroll = targetEl => {\n  const observerRef = useRef(null)\n  const [intersecting, setIntersecting] = useState(false)\n\n  const getObserver = useCallback(() => {\n    const what = new IntersectionObserver((entries)=> console.log(entries))\n    what.observe(observerRef.current)\n    if (!observerRef.current) {\n      observerRef.current = new IntersectionObserver(entries => setIntersecting(\n        // 없으면 intersecting false, 있으면 intersecting true\n        entries.some(entry => entry.isIntersecting)\n      ))\n    }\n\n    return observerRef.current\n  }, [observerRef.current])\n\n  useEffect(() => {\n    if (targetEl.current) getObserver().observe(targetEl.current)\n    return () => {\n      getObserver().disconnect()\n    }\n  }, [targetEl.current])\n\n  return intersecting\n}\n\nexport default useInfiniteScroll"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAEhE,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;EAAAC,EAAA;EACpC,MAAMC,WAAW,GAAGL,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMU,WAAW,GAAGP,WAAW,CAAC,MAAM;IACpC,MAAMQ,IAAI,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAIC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC,CAAC;IACvEF,IAAI,CAACK,OAAO,CAACT,WAAW,CAACU,OAAO,CAAC;IACjC,IAAI,CAACV,WAAW,CAACU,OAAO,EAAE;MACxBV,WAAW,CAACU,OAAO,GAAG,IAAIL,oBAAoB,CAACC,OAAO,IAAIJ,eAAe;MACvE;MACAI,OAAO,CAACK,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,cAAc,CAAC,CAC5C,CAAC;IACJ;IAEA,OAAOb,WAAW,CAACU,OAAO;EAC5B,CAAC,EAAE,CAACV,WAAW,CAACU,OAAO,CAAC,CAAC;EAEzBhB,SAAS,CAAC,MAAM;IACd,IAAII,QAAQ,CAACY,OAAO,EAAEP,WAAW,EAAE,CAACM,OAAO,CAACX,QAAQ,CAACY,OAAO,CAAC;IAC7D,OAAO,MAAM;MACXP,WAAW,EAAE,CAACW,UAAU,EAAE;IAC5B,CAAC;EACH,CAAC,EAAE,CAAChB,QAAQ,CAACY,OAAO,CAAC,CAAC;EAEtB,OAAOT,YAAY;AACrB,CAAC;AAAAF,EAAA,CAzBKF,iBAAiB;AA2BvB,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}