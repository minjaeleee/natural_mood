{"ast":null,"code":"import { BASE_URL } from \"./const\";\nexport const getBeer = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`);\n  return response.ok ? await response.json() : null;\n};\nexport const getWine = async (values, order) => {\n  const res = await fetch(`${BASE_URL}/wines/${values[0] || 'reds'}`);\n  if (!res.ok) return;\n  const resJson = await res.json();\n  if (order) {\n    const result = resJson.slice(order.from, order.size);\n    return result;\n  }\n  const result = resJson.slice(0, 20);\n  return result;\n\n  // 중복 선택\n  // const list = []\n  // for(const value of values) {\n  //   const res = await fetch(`${BASE_URL}/wines/${value}`)\n  //   if(!res.ok) return list;\n  //   const resJson = await res.json()\n  //   list.push(...resJson)\n  // }\n  // shuffle(list)\n  // if(order) {\n  //   const result = list.slice(order.from, order.size)\n  //   return result\n  // }\n  // const result = list.slice(0,20)\n  // return result\n};\n\nexport const getCoffee = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`);\n  return response.ok ? await response.json() : null;\n};","map":{"version":3,"names":["BASE_URL","getBeer","types","response","fetch","ok","json","getWine","values","order","res","resJson","result","slice","from","size","getCoffee"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/api/beverage.ts"],"sourcesContent":["import { IBeer, ICoffee, IWine } from \"../types/beverage\"\nimport { BASE_URL } from \"./const\"\n\ninterface IOrder {\n  from: number,\n  size: number\n}\n\ntype value = string[] | []\ntype order = IOrder | null\n\nexport const getBeer = async (types: string | null): Promise<IBeer[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`)\n  return response.ok ? await response.json() : null\n}\n\nexport const getWine = async (values: value, order: order): Promise<IWine[]> => {\n    const res = await fetch(`${BASE_URL}/wines/${values[0] || 'reds'}`)\n    if(!res.ok) return;\n    const resJson = await res.json()\n    if(order) {\n      const result = resJson.slice(order.from, order.size)\n      return result\n    }\n    const result = resJson.slice(0,20)\n    return result\n\n    // 중복 선택\n    // const list = []\n    // for(const value of values) {\n    //   const res = await fetch(`${BASE_URL}/wines/${value}`)\n    //   if(!res.ok) return list;\n    //   const resJson = await res.json()\n    //   list.push(...resJson)\n    // }\n    // shuffle(list)\n    // if(order) {\n    //   const result = list.slice(order.from, order.size)\n    //   return result\n    // }\n    // const result = list.slice(0,20)\n    // return result\n}\nexport const getCoffee = async (types: string | null): Promise<ICoffee[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`)\n  return response.ok ? await response.json() : null\n}"],"mappings":"AACA,SAASA,QAAQ,QAAQ,SAAS;AAUlC,OAAO,MAAMC,OAAO,GAAG,MAAOC,KAAoB,IAAuB;EACvE;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,YAAW,CAAC;EACrD,OAAOG,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,MAAa,EAAEC,KAAY,KAAuB;EAC5E,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAAE,GAAEJ,QAAS,UAASQ,MAAM,CAAC,CAAC,CAAC,IAAI,MAAO,EAAC,CAAC;EACnE,IAAG,CAACE,GAAG,CAACL,EAAE,EAAE;EACZ,MAAMM,OAAO,GAAG,MAAMD,GAAG,CAACJ,IAAI,EAAE;EAChC,IAAGG,KAAK,EAAE;IACR,MAAMG,MAAM,GAAGD,OAAO,CAACE,KAAK,CAACJ,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,IAAI,CAAC;IACpD,OAAOH,MAAM;EACf;EACA,MAAMA,MAAM,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC;EAClC,OAAOD,MAAM;;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;;AACD,OAAO,MAAMI,SAAS,GAAG,MAAOd,KAAoB,IAAyB;EAC3E;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,cAAa,CAAC;EACvD,OAAOG,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}