{"ast":null,"code":"export const useFilterType = _ref => {\n  let {\n    search\n  } = _ref;\n  const getQueryString = new URLSearchParams(decodeURIComponent(search).replace(/,/g, '+'));\n  const queryStringValue = getQueryString.get('type');\n\n  // fn2 라우팅 기능, searchparams는 return을 최종 string 형태로 하게됨.\n  const handleTypeQueryString = type => {\n    console.log(\"type\", type);\n  };\n  // fn2 함수를 호출할때 routerTo(fn2(key 등 인자 값))\n\n  return {\n    getQueryStringValue: queryStringValue === null || queryStringValue === void 0 ? void 0 : queryStringValue.split(\" \"),\n    handleTypeQueryString\n  };\n};","map":{"version":3,"names":["useFilterType","_ref","search","getQueryString","URLSearchParams","decodeURIComponent","replace","queryStringValue","get","handleTypeQueryString","type","console","log","getQueryStringValue","split"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/useHook/useFilterType.tsx"],"sourcesContent":["export const useFilterType = ({search}) => {\n  const getQueryString = new URLSearchParams(decodeURIComponent(search).replace(/,/g, '+'));\n  const queryStringValue = getQueryString.get('type')\n\n  // fn2 라우팅 기능, searchparams는 return을 최종 string 형태로 하게됨.\n  const handleTypeQueryString = (type:string) => {\n    console.log(\"type\",type)\n  }\n  // fn2 함수를 호출할때 routerTo(fn2(key 등 인자 값))\n\n  return {\n    getQueryStringValue: queryStringValue?.split(\" \"),\n    handleTypeQueryString\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGC,IAAA,IAAc;EAAA,IAAb;IAACC;EAAM,CAAC,GAAAD,IAAA;EACpC,MAAME,cAAc,GAAG,IAAIC,eAAe,CAACC,kBAAkB,CAACH,MAAM,CAAC,CAACI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;EACzF,MAAMC,gBAAgB,GAAGJ,cAAc,CAACK,GAAG,CAAC,MAAM,CAAC;;EAEnD;EACA,MAAMC,qBAAqB,GAAIC,IAAW,IAAK;IAC7CC,OAAO,CAACC,GAAG,CAAC,MAAM,EAACF,IAAI,CAAC;EAC1B,CAAC;EACD;;EAEA,OAAO;IACLG,mBAAmB,EAAEN,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEO,KAAK,CAAC,GAAG,CAAC;IACjDL;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}