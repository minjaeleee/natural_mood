{"ast":null,"code":"import { BASE_URL } from \"./const\";\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\nexport const getBeer = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`);\n  return response.ok ? await response.json() : null;\n};\nexport const getWine = async values => {\n  const list = [];\n  for (const value of values) {\n    const res = await fetch(`${BASE_URL}/wines/${value}`);\n    if (!res.ok) return;\n    const resJson = await res.json();\n    list.push(...resJson);\n  }\n\n  // const response = await fetch(`${BASE_URL}/wines/reds`)\n  // if(!response.ok) return null;\n  // const jsonResult = await response.json()\n  // const result = jsonResult.slice(0,20)\n  shuffle(list);\n  const result = list.slice(0, 20);\n  return result;\n};\nexport const getCoffee = async types => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`);\n  return response.ok ? await response.json() : null;\n};","map":{"version":3,"names":["BASE_URL","shuffle","array","sort","Math","random","getBeer","types","response","fetch","ok","json","getWine","values","list","value","res","resJson","push","result","slice","getCoffee"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/api/beverage.ts"],"sourcesContent":["import { IBeer, ICoffee, IWine } from \"../types/beverage\"\nimport { BASE_URL } from \"./const\"\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nexport const getBeer = async (types: string | null): Promise<IBeer[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/beers/ale`)\n  return response.ok ? await response.json() : null\n}\n\nexport const getWine = async (values: string[]): Promise<IWine[]> => {\n  const list = []\n  for(const value of values) {\n    const res = await fetch(`${BASE_URL}/wines/${value}`)\n    if(!res.ok) return;\n    const resJson = await res.json()\n    list.push(...resJson)\n  }\n  \n  // const response = await fetch(`${BASE_URL}/wines/reds`)\n  // if(!response.ok) return null;\n  // const jsonResult = await response.json()\n  // const result = jsonResult.slice(0,20)\n  shuffle(list)\n  const result = list.slice(0,20)\n  return result\n}\nexport const getCoffee = async (types: string | null): Promise<ICoffee[]> => {\n  // const response = await fetch(`${BASE_URL}/beers/${types || 'ale'}`)\n  const response = await fetch(`${BASE_URL}/coffee/iced`)\n  return response.ok ? await response.json() : null\n}"],"mappings":"AACA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtBA,KAAK,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;AACvC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAOC,KAAoB,IAAuB;EACvE;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,QAAS,YAAW,CAAC;EACrD,OAAOQ,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAOC,MAAgB,IAAuB;EACnE,MAAMC,IAAI,GAAG,EAAE;EACf,KAAI,MAAMC,KAAK,IAAIF,MAAM,EAAE;IACzB,MAAMG,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAET,QAAS,UAASe,KAAM,EAAC,CAAC;IACrD,IAAG,CAACC,GAAG,CAACN,EAAE,EAAE;IACZ,MAAMO,OAAO,GAAG,MAAMD,GAAG,CAACL,IAAI,EAAE;IAChCG,IAAI,CAACI,IAAI,CAAC,GAAGD,OAAO,CAAC;EACvB;;EAEA;EACA;EACA;EACA;EACAhB,OAAO,CAACa,IAAI,CAAC;EACb,MAAMK,MAAM,GAAGL,IAAI,CAACM,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC;EAC/B,OAAOD,MAAM;AACf,CAAC;AACD,OAAO,MAAME,SAAS,GAAG,MAAOd,KAAoB,IAAyB;EAC3E;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,QAAS,cAAa,CAAC;EACvD,OAAOQ,QAAQ,CAACE,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE,GAAG,IAAI;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}