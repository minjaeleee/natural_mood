{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useInfiniteScroll = targetEl => {\n  _s();\n  const observerRef = useRef(null);\n  const [intersecting, setIntersecting] = useState(false);\n\n  // const getObserver = useCallback(() => {\n  //   if (!observerRef.current) {\n  //     observerRef.current = new IntersectionObserver(entries => {\n  //       setIntersecting(\n  //       // 없으면 intersecting false, 있으면 intersecting true\n  //       entries.some(entry => entry.isIntersecting)\n  //     )}\n  //   )\n  //   }\n  //   console.log(observerRef.current)\n  //   return observerRef.current\n  // }, [observerRef.current])\n\n  const observer = new IntersectionObserver(entries => setIntersecting(entries.some(entry => entry.isIntersecting)));\n  console.log(observer);\n  useEffect(() => {\n    // if (targetEl.current) getObserver().observe(targetEl.current)\n    if (targetEl.current) observer.observe(targetEl.current);\n    return () => {\n      // getObserver().disconnect()\n      observer.disconnect();\n    };\n  }, [targetEl.current]);\n  return intersecting;\n};\n_s(useInfiniteScroll, \"IB/8VQZF5EiETb0Xt8FgkiEb2YQ=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useState","useEffect","useRef","useInfiniteScroll","targetEl","_s","observerRef","intersecting","setIntersecting","observer","IntersectionObserver","entries","some","entry","isIntersecting","console","log","current","observe","disconnect"],"sources":["/Users/minjaelee/Desktop/development/natural_mood/src/useHook/useInfiniteScroll.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react'\n\nconst useInfiniteScroll = targetEl => {\n  const observerRef = useRef(null)\n  const [intersecting, setIntersecting] = useState(false)\n\n  // const getObserver = useCallback(() => {\n  //   if (!observerRef.current) {\n  //     observerRef.current = new IntersectionObserver(entries => {\n  //       setIntersecting(\n  //       // 없으면 intersecting false, 있으면 intersecting true\n  //       entries.some(entry => entry.isIntersecting)\n  //     )}\n  //   )\n  //   }\n  //   console.log(observerRef.current)\n  //   return observerRef.current\n  // }, [observerRef.current])\n\n  const observer = new IntersectionObserver(entries => \n    setIntersecting(\n      entries.some(entry => entry.isIntersecting)\n    )  \n  )\n  console.log(observer)\n  useEffect(() => {\n    // if (targetEl.current) getObserver().observe(targetEl.current)\n    if (targetEl.current) observer.observe(targetEl.current)\n    return () => {\n      // getObserver().disconnect()\n      observer.disconnect()\n    }\n  }, [targetEl.current])\n\n  return intersecting\n}\n\nexport default useInfiniteScroll"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAqB,OAAO;AAEhE,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;EAAAC,EAAA;EACpC,MAAMC,WAAW,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMS,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,OAAO,IAC/CH,eAAe,CACbG,OAAO,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,cAAc,CAAC,CAC5C,CACF;EACDC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;EACrBR,SAAS,CAAC,MAAM;IACd;IACA,IAAIG,QAAQ,CAACa,OAAO,EAAER,QAAQ,CAACS,OAAO,CAACd,QAAQ,CAACa,OAAO,CAAC;IACxD,OAAO,MAAM;MACX;MACAR,QAAQ,CAACU,UAAU,EAAE;IACvB,CAAC;EACH,CAAC,EAAE,CAACf,QAAQ,CAACa,OAAO,CAAC,CAAC;EAEtB,OAAOV,YAAY;AACrB,CAAC;AAAAF,EAAA,CAjCKF,iBAAiB;AAmCvB,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}